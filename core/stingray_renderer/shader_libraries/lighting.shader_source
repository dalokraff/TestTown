includes = [ "core/stingray_renderer/shader_libraries/common/common.shader_source",
			 "core/stingray_renderer/shader_libraries/common/lighting_common.shader_source",
			 "core/stingray_renderer/shader_libraries/common/shadow_map_common.shader_source",
			 "core/stingray_renderer/shader_libraries/common/post_processing_common.shader_source" ]

render_states = {
	filter = {
		inherits = "default"
		states = {
			z_write_enable = "false"
			z_enable = "false"
		}
	}

	light = {
		inherits = "default"
		states = {
			z_enable = "true"
			z_write_enable = "false"
			blend_enable = "true"
			blend_op = "blend_op_add"
			dest_blend = "blend_one"
			src_blend = "blend_one"

			cull_mode = "cull_ccw"
			z_func = "greater_equal"

			defined_SKIN_MATERIAL_ENABLED = {
				stencil_enable = "true"
				stencil_func = "equal"
				stencil_fail = "stencil_op_keep"
				stencil_pass = "stencil_op_keep"
				stencil_z_fail = "stencil_op_keep"

				stencil_func_back_side = "equal"
				stencil_fail_back_side = "stencil_op_keep"
				stencil_pass_back_side = "stencil_op_keep"
				stencil_z_fail_back_side = "stencil_op_keep"

				stencil_mask = "0x18"
				stencil_write_mask = "0x0"
				defined_SKIN = {
					stencil_ref = "0x8"
				}
				ndefined_SKIN = {
					stencil_ref = "0x0"					
				}
			}
			write_mask0 = "red|green|blue"
			write_mask1 = "red|green|blue"
		}
	}

	global_lighting = {
		inherits = "filter"
		states = {
			z_enable = "true"
			z_func = "greater"
			defined_SKIN_MATERIAL_ENABLED = {
				stencil_enable = "true"
				stencil_func = "equal"
				stencil_fail = "stencil_op_keep"
				stencil_pass = "stencil_op_keep"
				stencil_z_fail = "stencil_op_keep"

				stencil_func_back_side = "equal"
				stencil_fail_back_side = "stencil_op_keep"
				stencil_pass_back_side = "stencil_op_keep"
				stencil_z_fail_back_side = "stencil_op_keep"

				stencil_mask = "0x18"
				stencil_write_mask = "0x0"
				defined_SKIN = {
					stencil_ref = "0x8"
					write_mask1 = "red|green|blue|alpha"
				}
				ndefined_SKIN = {
					stencil_ref = "0x0"
				}
			}
			// alpha channel is not used for blending anymore
			write_mask0 = "red|green|blue|alpha"
		}
	}

	ao_source = {
		inherits = "default"
		states = {
			z_enable = "true"
			z_func = "greater_equal"
			z_write_enable = "false"
			cull_mode = "cull_ccw"

			write_mask0 = "red"
			blend_enable = "true"
			blend_op = "blend_op_min"
			dest_blend = "blend_one"
			src_blend = "blend_one"
		}
	}
}

hlsl_shaders = {
	global_lighting = {
		includes = [ "common", "gbuffer_access", "brdf", "color_management", "post_processing_common", "taa_offsets", "shadow_bias", "shadow_map_filtering", "clustered_shading" ]
		samplers = {
			gbuffer0 = { sampler_states = "clamp_point" }
			gbuffer1 = { sampler_states = "clamp_point" }
			gbuffer2 = { sampler_states = "clamp_point" }
			// gbuffer3 = { sampler_states = "clamp_point" }
			linear_depth = { sampler_states = "clamp_point" }
			global_diffuse_map = { sampler_states = "clamp_linear"}
			global_specular_map = { sampler_states = "clamp_linear"}
			brdf_lut = { sampler_states = "clamp_linear"}
			hdr1 = { sampler_states = "clamp_point" }
			hdr2 = { sampler_states = "clamp_point" }
			defined_SSR_ENABLED = {
				hdr0_div2_mip6 = { sampler_states = "clamp_linear" }
				ldr4_div2 = { sampler_states = "clamp_point" }
			}			
			defined_SSAO_ENABLED = {
				ssao_buffer = { sampler_states = "clamp_linear" }
			}
			defined_SUN = {
				ldr0_r = { sampler_states = "clamp_point" }
			}
			defined_RENDERER_GL = {
				depth_stencil_buffer = { sampler_states = "clamp_point" }
			}

			defined_CLUSTERED_SHADING = {
				local_lights_shadow_atlas = { sampler_states = "shadow_map" }
				cached_local_lights_shadow_atlas = { sampler_states = "shadow_map" }
			}
		}

		code="""
			DECLARE_SAMPLER_2D(gbuffer0);
			DECLARE_SAMPLER_2D(gbuffer1);
			DECLARE_SAMPLER_2D(gbuffer2);
			// DECLARE_SAMPLER_2D(gbuffer3);
			DECLARE_SAMPLER_2D(linear_depth);
			DECLARE_SAMPLER_CUBE(global_diffuse_map);
			DECLARE_SAMPLER_CUBE(global_specular_map);
			DECLARE_SAMPLER_2D(brdf_lut);
			#if defined(LOCAL_PROBES_ENABLED)
				DECLARE_SAMPLER_2D(hdr1);
				DECLARE_SAMPLER_2D(hdr2);
			#endif
			#if defined(SSR_ENABLED)
				DECLARE_SAMPLER_2D(hdr0_div2_mip6);
				DECLARE_SAMPLER_2D(ldr4_div2);
			#endif
			#if defined(SSAO_ENABLED)
				DECLARE_SAMPLER_2D(ssao_buffer);
			#endif
			#if defined(SUN)
				DECLARE_SAMPLER_2D(ldr0_r);
			#endif
			
			struct VS_INPUT {
				float4 position : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct PS_INPUT {
				float4 position : SV_POSITION;
				float2 uv : TEXCOORD0;
				float4 w : TEXCOORD1;
			};

			CBUFFER_START(c0)
				float4x4 world_view_proj;
				float ao_enabled;
				float ambient_specular_intensity;
			CBUFFER_END

			#if defined(CLUSTERED_SHADING)
				DECLARE_CLUSTER_DATA(cs_cluster_buffer);
				DECLARE_LIGHT_INDEX_DATA(cs_light_index_buffer);
				DECLARE_LIGHT_DATA(cs_light_data_buffer);
				DECLARE_LIGHT_SHADOW_MATRICES(cs_light_shadow_matrices_buffer);
				DECLARE_LIGHT_SHADOW_LOOKUP(cs_light_shadow_lookup_buffer);
				DECLARE_COMPARISON_SAMPLER_2D(local_lights_shadow_atlas);
				DECLARE_COMPARISON_SAMPLER_2D(cached_local_lights_shadow_atlas);
			#endif

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			PS_INPUT vs_main(VS_INPUT input) {
				PS_INPUT o;
				o.position = mul(input.position, world_view_proj);
				o.uv = input.uv;
				o.w = encode_world_pos(o.position);
				o.position.z = o.position.w;

				#if defined(CLUSTERED_SHADING)
					// When using temporal antialiasing we try to cancel out the jitter
					// that was introduced in the depth buffer. This is to minimize self occlusion
					// that can arrise when performing a depth test beween the jittered depth buffer
					// and a non jittered shadow map.
					float4 tmp = o.position;
					float4 view_space = tmp / tmp.w;
					view_space.xy -= get_vs_halton_offset(frame_number);
					tmp = view_space * tmp.w;
					o.w = encode_world_pos(tmp);
				#endif

				return o;
			}

			struct PS_OUTPUT {
				#if defined(SKIN)
					half3 specular 	: SV_TARGET0;
					half4 diffuse 	: SV_TARGET1;
				#else
					half3 base : SV_TARGET0;
				#endif
			};

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			PS_OUTPUT ps_main(PS_INPUT input) {
				PS_OUTPUT o;

				float4 gbuffer_0 = TEX2D(gbuffer0, input.uv);
				float4 gbuffer_1 = TEX2D(gbuffer1, input.uv);
				float4 gbuffer_2 = TEX2D(gbuffer2, input.uv);

				half3 base_color = gbuffer_decode_base_color(gbuffer_0);
				half material_id = gbuffer_decode_material_id(gbuffer_0);
				float3 N = gbuffer_decode_normal(gbuffer_1, material_id);
				half roughness = gbuffer_decode_roughness(gbuffer_1);
				half ao = gbuffer_decode_ambient_occlusion(gbuffer_2);
				half metallic = gbuffer_decode_metallic_mask(gbuffer_2, material_id);
				half density = gbuffer_decode_density(gbuffer_2, material_id);
				half density_shadow_bias = gbuffer_decode_density_shadow_bias(gbuffer_1, material_id);
				half skin_sss = gbuffer_decode_skin(gbuffer_2, material_id);
				half cloth_falloff = gbuffer_decode_cloth_falloff(gbuffer_2, material_id);
				float clear_coat_roughness = gbuffer_decode_clear_coat(gbuffer_2, material_id);
				float depth = gbuffer_decode_depth(TEX2D(linear_depth, input.uv));

				float ssao = 1.0;
				#if defined(SSAO_ENABLED)
					#if defined(D3D11)
						const bool ssao_enabled = ao_enabled && capture_cubemap == 0.0;
					#else
						const bool ssao_enabled = ao_enabled;
					#endif
					[branch]
					if (ssao_enabled) {
						ssao = TEX2D(ssao_buffer, input.uv).r;
					}
				#endif
				
				// 0.04 is taken as a common value for dielectrics. Source: Real-time rendering 3rd edition.
				float3 specular_color = lerp(float3(0.04,0.04,0.04), base_color, metallic);
				float3 diffuse_color = lerp(base_color, float3(0,0,0), metallic);
				
				half3 ambient_tint_color = ambient_tint_top_enabled > 0.0 ? lerp(ambient_tint, ambient_tint_top, N.z*0.5+0.5) : ambient_tint;
				#if defined(D3D11)
					float specular_toggle = 1-capture_cubemap;
					// If we are currently capturing a reflection probe, use specular F0 as diffuse color for metallics
					diffuse_color = (specular_toggle == 1) ? diffuse_color : lerp(diffuse_color, specular_color, metallic);

					// Remove ambient tint from cube map baking, since will have an exponential effect on the result.
					ambient_tint_color = (specular_toggle == 1) ? ambient_tint_color : 1.0;
				#else
					float specular_toggle = 1.f;
				#endif

				float3 wp = decode_world_pos(input.w, depth);
				float3 V = normalize(camera_world._m30_m31_m32 - wp);

				//float ao_lerp_term = max(dot(N, V), 0.0);
				//ao = lerp(1.0, ao, ao_lerp_term);
				ao = min(ao, ssao);

				#if defined(LOCAL_PROBES_ENABLED)
					const float4 local_radiation_data = TEX2D(hdr2, input.uv) * specular_toggle;
				#else
					const float4 local_radiation_data = 0.0;
				#endif
				float3 global_radiation_probe_data = (global_probe_rgbm_encoded ? 
					rgbm_decode(TEXCUBELOD(global_diffuse_map, N, 0)) :
					TEXCUBELOD(global_diffuse_map, N, 0)) * ambient_global_tint;
				float3 diffuse_ambient = (local_radiation_data.rgb + (1.0 - local_radiation_data.a) * global_radiation_probe_data)  * ambient_tint_color * diffuse_color;

				float2 scale_bias = TEX2D(brdf_lut, float2(saturate(dot(N, V)), roughness)).xy;

				// Remove energy from the diffuse ambient term from the Fresnel reflections
				float inv_fresnel = 1.f - scale_bias.y;
				float diff_attn = lerp(inv_fresnel, inv_fresnel * 0.04, metallic);
				diffuse_ambient *= diff_attn;	

				// Read all the reflection data
				float mipmap_index = roughness * 7.0;
				float3 global_probe_data = global_probe_rgbm_encoded ? 
					rgbm_decode(TEXCUBELOD(global_specular_map, reflect(-V, N), mipmap_index)) :
					TEXCUBELOD(global_specular_map, reflect(-V, N), mipmap_index);

				if (material_id == CLEAR_COAT_MATERIAL_ID) {
					// TODO: make this energy conserving
					float clear_coat_mipmap_index = clear_coat_roughness * 7.0;
					float3 clear_coat_reflection = global_probe_rgbm_encoded ? 
						rgbm_decode(TEXCUBELOD(global_specular_map, reflect(-V, N), clear_coat_mipmap_index)) : 
						TEXCUBELOD(global_specular_map, reflect(-V, N), clear_coat_mipmap_index);
					global_probe_data += clear_coat_reflection * 0.25;
				}

				global_probe_data *= ambient_global_tint;

				// prepare reflections
				// Distribute the reflection weight (ssr -> local probes -> global probe)

				#if defined(SSR_ENABLED)
					const float ssr_mip_level = TEX2DLOD(ldr4_div2, input.uv, 0).r * SSR_MIPMAP_LEVELS;
					const float4 ssr_data = TEX2DLOD(hdr0_div2_mip6, input.uv, ssr_mip_level);

					const float ssr_weight = ssr_data.a;
					const float3 ssr_influence = inv_safe_range_tone_map(ssr_data.rgb) * ssr_weight;
				#else
					const float ssr_weight = 0.0; 
					const float3 ssr_influence = 0.0;
				#endif

				#if defined(LOCAL_PROBES_ENABLED)
					const float4 local_reflections_data = TEX2D(hdr1, input.uv);

					#if defined(SSR_ENABLED)
						// adjust weight after ssr weight, total weight should be below 1
						const float local_probe_weight = min(local_reflections_data.a, 1.0 - ssr_weight);
						// adjust local reflection influence with the weight modification
						const float3 local_probe_influence = local_reflections_data.rgb * (local_reflections_data.a > 0.0 ? (local_probe_weight / local_reflections_data.a) : 1.0);
					#else
						const float local_probe_weight = local_reflections_data.a;
						const float3 local_probe_influence = local_reflections_data.rgb;
					#endif
				#else
					const float local_probe_weight = 0.0;
					const float3 local_probe_influence = 0.0;
				#endif

				const float global_probe_weight = 1.0 - (ssr_weight + local_probe_weight);

				// Final reflection influence terms
				float3 global_probe_influence = global_probe_data.rgb * global_probe_weight;

				float3 specular_ambient = (ssr_influence + local_probe_influence + global_probe_influence) * (specular_color * scale_bias.x + scale_bias.y) * ambient_tint_color * ambient_specular_intensity;

				// If we are currently capturing a reflection probe, mask out all IBL based relfections to avoid feedback loops.
				specular_ambient *= specular_toggle;

				half3 acc_diff = 0;
				half3 acc_spec = 0;
				half3 translucency = 0;
				#if defined(SUN)
					float3 L = normalize(-sun_direction);
					half shadow_mask = TEX2D(ldr0_r, input.uv).r;

					half transluency_shadow = calculate_transluency_shadow(density_shadow_bias, shadow_mask, density);
					bsdf(material_id, L, V, N, sun_color, base_color, diffuse_color, specular_color, roughness, shadow_mask, transluency_shadow,
					     density, clear_coat_roughness, cloth_falloff, ao,
					     acc_diff, acc_spec, translucency);
				#endif
				#if defined(CLUSTERED_SHADING)
					clustered_shading(cs_cluster_buffer, cs_light_index_buffer, cs_light_data_buffer, 
						#if defined(LOCAL_LIGHT_SHADOWS_ENABLED)
							cs_light_shadow_matrices_buffer, cs_light_shadow_lookup_buffer, local_lights_shadow_atlas, cached_local_lights_shadow_atlas,
						#endif
						wp, V, input.position.xy, depth, N, diffuse_color, specular_color, roughness, density, density_shadow_bias, base_color, material_id, clear_coat_roughness, cloth_falloff, ao, acc_diff, acc_spec, translucency);
				#endif
				#if !defined(SKIN)
					float3 ambient = diffuse_ambient + specular_ambient;
					ambient *= ao;

					float3 col = ambient + acc_diff + acc_spec * specular_toggle + translucency;
					o.base = col;
				#else
					float3 diffuse_lighting = diffuse_ambient * ao;
					float3 specular_lighting = specular_ambient * ao;
					
					diffuse_lighting += acc_diff;
					specular_lighting += acc_spec * specular_toggle;

					o.specular = specular_lighting;
					o.diffuse = float4(diffuse_lighting, skin_sss);
				#endif

				return o;
			}
		"""
	}

	light_source = {
		includes = [ "common", "gbuffer_access", "brdf", "shadow_bias", "taa_offsets", "shadow_map_filtering" ]

		samplers = {
			defined_SHADOW_MAPPING = {
				local_lights_shadow_atlas = { sampler_states = "shadow_map" }
				cached_local_lights_shadow_atlas = { sampler_states = "shadow_map" }				
			}
			gbuffer0 = { sampler_states = "clamp_point" }
			gbuffer1 = { sampler_states = "clamp_point" }
			gbuffer2 = { sampler_states = "clamp_point" }
			linear_depth = { sampler_states = "clamp_point" }
			defined_SPOT = {
				defined_COOKIE_PROJECTION = {
					defined_COOKIE_CLAMP_SAMPLER = {
						ndefined_COOKIE_UV_OFFSET_ANIM = {
							diffuse_map = { sampler_states = "clamp_linear" }
						}
						defined_COOKIE_UV_OFFSET_ANIM = {
							diffuse_map = { sampler_states = "wrap_linear" }
						}
					}
					ndefined_COOKIE_CLAMP_SAMPLER = {
						diffuse_map = { sampler_states = "wrap_linear" }
					}
				}
			}
		}

		code="""
			DECLARE_SAMPLER_2D(gbuffer0);
			DECLARE_SAMPLER_2D(gbuffer1);
			DECLARE_SAMPLER_2D(gbuffer2);
			DECLARE_SAMPLER_2D(linear_depth);
			#if defined(COOKIE_PROJECTION) && defined(SPOT)
				DECLARE_SAMPLER_2D(diffuse_map); // exports={ name="Cookie Projection Map" type="resource" sort_tag="0_DIFFUSE_MAP"}
			#endif

			#if defined(SHADOW_MAPPING)	&& (defined(D3D11) || defined(D3D12))
				DECLARE_COMPARISON_SAMPLER_2D(local_lights_shadow_atlas);
				DECLARE_COMPARISON_SAMPLER_2D(cached_local_lights_shadow_atlas);
			#endif

			struct VS_INPUT {
				float4 position : POSITION;
			};

			struct PS_INPUT {
				float4 position : SV_POSITION;
				#if !defined(STENCIL_MARK)
					float4 w : TEXCOORD1;
				#endif
			};

			CBUFFER_START(c0)
				#if defined(SPOT) || defined(BOX)
					float4x4 world;
					float4x4 inv_world;
				#endif
				float4x4 world_view_proj;
			CBUFFER_END

			CBUFFER_START(light)
				float3 light_position;
				float3 light_color;
				
				#if defined(OMNI) || defined(SPOT)
					// start, 1.f/(end-start), exp				
					float3 light_falloff;
				#endif
				#if defined(SPOT)
					#if defined(COOKIE_PROJECTION)
						// scale, bias, projection_scale
						float3 light_spot_falloff;
					#else
						// scale, bias
						float2 light_spot_falloff;
					#endif
				#endif

				#if defined(SHADOW_MAPPING)
					#if defined(OMNI)
						float4x4 world_to_shadow_maps[6];
						float4x4 world_to_static_shadow_maps[6];
					#else
						float4x4 world_to_shadow_map;
						float4x4 world_to_static_shadow_map;
					#endif
					float shadow_intensity;
					float4 shadow_map_resolution;
				#endif

				#if defined(BOX)
					float3 light_box_min;
					float3 light_box_max;
				#endif

				float3 light_proxy_scale;
				#if defined(COOKIE_PROJECTION) && defined(SPOT)
					#if defined(COOKIE_UV_OFFSET_ANIM)
						float2 cookie_uv_speed; // exports={ name="Cookie UV Offset Speed" type="vector2" value=[0.1 0.1] min=[-10.0 -10.0] max=[10.0 10.0] step=[0.001 0.001] }
					#endif
					#if defined(COOKIE_UV_OFFSET)
						float2 cookie_uv_offset; // exports={ name="Cookie UV Offset" type="vector2" value=[0.5 0.5] min=[0 0] max=[1 1] step=[0.001 0.001] }
					#endif
					#if defined(COOKIE_UV_ROTATION_ANIM)
						float2 cookie_uv_rotation_pivot;   // exports={ name="Cookie UV Rotation Pivot" type="vector2" value=[0.5 0.5] min=[-1.0 -1.0] max=[1.0 1.0] step=[0.001 0.001] }
						float2 cookie_uv_rotation_speed;   // exports={ name="Cookie UV Rotation Speed" type="scalar" value=1.0 min=-50 max=50 step=0.001 }
					#endif
					#if defined(COOKIE_UV_SCALE)
						float2 cookie_uv_scale; // exports={ name="Cookie UV Scale" type="vector2" value=[1 1] min=[0.001 0.001] max=[100 100] step=[0.001 0.001] }
					#endif
				#endif
			CBUFFER_END

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			PS_INPUT vs_main(VS_INPUT input) {
				PS_INPUT o;
				
				#if defined(BOX)
					float3 p = input.position.xyz * light_proxy_scale;
					p += (light_box_max + light_box_min) * 0.5;
					o.position = mul(float4(p, 1), world_view_proj);
				#else
					o.position = mul(float4(input.position.xyz * light_proxy_scale, 1), world_view_proj);
				#endif

				
				#if !defined(STENCIL_MARK)
					#if defined(SHADOW_MAPPING)
						// When using temporal antialiasing we try to cancel out the jitter
						// that was introduced in the depth buffer. This is to minimize self occlusion
						// that can arrise when performing a depth test beween the jittered depth buffer
						// and a non jittered shadow map.
						float4 tmp = o.position;
						float4 view_space = tmp / tmp.w;
						view_space.xy -= get_vs_halton_offset(frame_number);
						tmp = view_space * tmp.w;
						o.w = encode_world_pos(tmp);
					#else
						o.w = encode_world_pos(o.position);
					#endif
				#endif
				return o;
			}

			struct PS_OUTPUT {
				#if defined(SKIN)
					half3 specular 	: SV_TARGET0;
					half3 diffuse 	: SV_TARGET1;
				#else
					half3 base 		: SV_TARGET0;
				#endif
			};

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			#if defined(STENCIL_MARK)
				half4 ps_main() : SV_TARGET0 {
					return half4(0,0,0,0);
				}
			#else
				PS_OUTPUT ps_main(PS_INPUT input)
				{
					PS_OUTPUT o;
 
					half2 uv = input.position.xy / output_rt_size;
					float depth = gbuffer_decode_depth(TEX2D(linear_depth, uv));

					#if defined(D3D11)
						float specular_toggle = 1-capture_cubemap;
					#else
						float specular_toggle = 1.f;
					#endif

					float3 wp = decode_world_pos(input.w, depth);
					float3 L = float3(0,0,1);
					float attn = 1.f;
					#if defined(OMNI) || defined(SPOT)
						L = light_position - wp;
						float len_L = length(L) + 0.00001f;
						attn = light_attenuation(len_L, light_falloff.x, light_falloff.y);
						L *= 1.0/len_L;

						float normalized_distance = (len_L - light_falloff.x) * light_falloff.y;
						[branch]
						if (normalized_distance > 1.0f) discard;

						#if defined(OMNI) && defined(SHADOW_MAPPING)
							// The shadows from the faces of an onmni light are populated in the following order and directions.
							//	float3(-1.0f,  0.0f,  0.0f),
							//	float3( 1.0f,  0.0f,  0.0f),
							//	float3( 0.0f, -1.0f,  0.0f),
							//	float3( 0.0f,  1.0f,  0.0f),
							//	float3( 0.0f,  0.0f, -1.0f)
							//	float3( 0.0f,  0.0f,  1.0f),

							// Based on the biggest component of the vector from the shaded position to the light source and its sign, chose the correct
							// shadow map index to get the correct world position to shadow map matrix.
							const float3 shadow_L = -L;
							const int3 is_positive = shadow_L > 0;
							const float3 abs_shadow_L = abs(shadow_L);
							int test_index = (abs_shadow_L.x > abs_shadow_L.y && abs_shadow_L.x > abs_shadow_L.z) ? 0 + is_positive[0]: (abs_shadow_L.y > abs_shadow_L.z) ? 2 + is_positive[1] : 4 + is_positive[2];

							// On the cpu side, the whole matrix will be full of zeroes if the face is not casting any shadows. Just test the first element.
							const float shadow_active = world_to_shadow_maps[uint(test_index)]._m00 != 0.0f? 1.0f : 0.0f;
							float4 ls = mul(float4(wp, 1), world_to_shadow_maps[uint(test_index)]);
							
							const float static_shadow_active = world_to_static_shadow_maps[uint(test_index)]._m00 != 0.0f? 1.0f : 0.0f;
							float4 ls_s = mul(float4(wp, 1), world_to_static_shadow_maps[uint(test_index)]);
							
						#elif defined(SPOT)
							float spot_attenuation = spot_angle_attenuation(dot(-L, world._m10_m11_m12), light_spot_falloff.x, light_spot_falloff.y);
							if (spot_attenuation == 0.0f) discard;
							attn *= spot_attenuation;
						#endif
					#elif defined(BOX)
						L = -world._m10_m11_m12;
						float3 op = mul(float4(wp, 1), inv_world).xyz;
						float3 containment = (op > light_box_min) * (op < light_box_max);
						float mask = dot(containment, containment) == 3;
						attn = light_attenuation(op.y, light_box_min.y, 1.f / (light_box_max.y - light_box_min.x)) * mask;
					#endif

					#if !defined(OMNI) && defined(SHADOW_MAPPING)
						const float shadow_active = world_to_shadow_map._m00 != 0.0f ? 1.0f : 0.0f;
						const float static_shadow_active = world_to_static_shadow_map._m00 != 0.0f ? 1.0f : 0.0f;
					#endif      
  
					
					#if defined(COOKIE_PROJECTION) && defined(SPOT)
						float2 cookie_uv = mul(L, (float3x3)inv_world).xz * light_spot_falloff.z;

						#if defined(COOKIE_UV_SCALE)
							cookie_uv *= cookie_uv_scale;
						#endif

						#if defined(COOKIE_UV_OFFSET)
							cookie_uv = cookie_uv * float2(0.5, -0.5) + cookie_uv_offset;
						#else
							cookie_uv = cookie_uv * float2(0.5, -0.5) + 0.5;
						#endif

						#if defined(COOKIE_UV_ROTATION_ANIM)
							float A = cookie_uv_rotation_speed * time;
							float C = cos(A);
							float S = sin(A);
							float2 center = cookie_uv - cookie_uv_rotation_pivot;
							float2 result = float2(	(center.x * C + center.y * S) + cookie_uv_rotation_pivot.x,
													(center.y * C - center.x * S) + cookie_uv_rotation_pivot.y);
							cookie_uv = result;
						#endif

						#if defined(COOKIE_UV_OFFSET_ANIM)
							cookie_uv += cookie_uv_speed * time;
						#endif

						light_color *= TEX2D(diffuse_map, cookie_uv);
					#endif

					float shadow_mask = 1.0;
					#if defined(SHADOW_MAPPING)
						#if !defined(OMNI)
							float4 ls = mul(float4(wp,1), world_to_shadow_map);
							float4 ls_s = mul(float4(wp,1), world_to_static_shadow_map);
						#endif

						#if defined(D3D11) || defined(D3D12)
							ls_s.xyz /= ls_s.w;
							ls_s.z = apply_local_shadow_depth_comparison_bias(depth, ls_s.z, local_shadow_map_bias);
							half static_shadow = static_shadow_active > 0.0f ? shadow_intensity_2d(cached_local_lights_shadow_atlas, shadow_map_resolution.zw, ls_s.xy, ls_s.z) : 1.0f;
							
							ls.xyz /= ls.w;
							ls.z = apply_local_shadow_depth_comparison_bias(depth, ls.z, local_shadow_map_bias);
							half shadow = shadow_active > 0.0f? shadow_intensity_2d(local_lights_shadow_atlas, shadow_map_resolution.xy, ls.xy, ls.z) : 1.0f;
							
							shadow_mask = saturate(((min(shadow, static_shadow)) - 1.0) * shadow_intensity + 1.0);
						#endif
					#endif

					half4 gbuffer_0 = TEX2D(gbuffer0, uv);
					half4 gbuffer_1 = TEX2D(gbuffer1, uv);
					half4 gbuffer_2 = TEX2D(gbuffer2, uv); 

					half3 base_color = gbuffer_decode_base_color(gbuffer_0);
					half material_id = gbuffer_decode_material_id(gbuffer_0);
					float3 N = gbuffer_decode_normal(gbuffer_1, material_id);
					half roughness = gbuffer_decode_roughness(gbuffer_1);
					half ao = gbuffer_decode_ambient_occlusion(gbuffer_2); // TODO?
					half metallic = gbuffer_decode_metallic_mask(gbuffer_2, material_id);
					half density = gbuffer_decode_density(gbuffer_2, material_id);
					half density_shadow_bias = gbuffer_decode_density_shadow_bias(gbuffer_1, material_id);
					half clear_coat_roughness = gbuffer_decode_clear_coat(gbuffer_2, material_id);
					half cloth_falloff = gbuffer_decode_cloth_falloff(gbuffer_2, material_id);

					// 0.04 is taken as a common value for dielectrics. Source: Real-time rendering 3rd edition.
					float3 specular_color = lerp(float3(0.04,0.04,0.04), base_color, metallic);
					float3 diffuse_color = lerp(base_color, new_half3(0,0,0), metallic);
					#if defined(D3D11) || defined(D3D12)
						// If we are currently capturing a reflection probe, use specular F0 as diffuse color for metallics
						diffuse_color = (specular_toggle == 1) ? diffuse_color : lerp(diffuse_color, specular_color, metallic);
					#endif

					float3 V = normalize(camera_world._m30_m31_m32 - wp);
					half3 acc_diff = 0;
					half3 acc_spec = 0;
					half3 translucency = 0;

					half transluency_shadow = calculate_transluency_shadow(density_shadow_bias, shadow_mask, density);
					bsdf(material_id, L, V, N, light_color, base_color, diffuse_color, specular_color, roughness, attn*shadow_mask, attn*transluency_shadow, density, clear_coat_roughness, cloth_falloff, ao, acc_diff, acc_spec, translucency);

					#if defined(SKIN)
						o.specular = acc_spec * specular_toggle;
						o.diffuse = acc_diff;
					#else
						o.base = acc_diff + acc_spec * specular_toggle + translucency;
					#endif					
					return o;
				}
			#endif
		"""
	}

	brdf_lut = {
		includes = [ "common", "brdf" ]

		code = """
			struct VS_INPUT {
				float4 position : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct PS_INPUT {
				float4 position : SV_POSITION;
				float2 uv : TEXCOORD0;
			};

			CBUFFER_START(c0)
				float4x4 world_view_proj;
			CBUFFER_END

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			PS_INPUT vs_main(VS_INPUT input) {
				PS_INPUT o;
				o.position = mul(input.position, world_view_proj);
				o.uv = input.uv;
				return o;
			}

			float2 preintegrate_gf(float NV, float roughness) {
				float3 V = float3(sqrt(1.0f - NV * NV), 0.0f, NV);

				float scale = 0.0f;
				float bias = 0.0f;

				const uint samples = 1024;
				for (uint i = 0; i < samples; ++i) {
					float2 E = hammersley_sequence_2d(i, samples);
					float3 H = importance_sample_ggx(E, roughness, float3(0,0,1));

					float3 L = 2.0f * dot(V, H) * H - V;

					float NL = saturate(L.z);
					float NH = saturate(H.z);
					float VH = saturate(dot(V, H));

					if (NL > 0.0f) {
						float G = g_visibility_schlick_smith(roughness, NV, NL) * (4 * NL * NV);
						float G_vis = G * VH / (NH * NV);						
						float F = pow(1 - VH, 5);
						scale += (1 - F) * G_vis;
						bias += F * G_vis;
					}
				}

				return float2(scale, bias) / samples;
			}

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			float4 ps_main(PS_INPUT input) : SV_TARGET0 {
				float NV = input.uv.x;
				float roughness = input.uv.y;
				float2 lut = preintegrate_gf(NV, roughness);
				return float4(lut, 0, 0);
			}
		"""
	}

	// TODO: update using the new local light code
	ao_source = {
		includes = [ "common", "gbuffer_access", "brdf" ]

		samplers = {
			defined_LAMBERTIAN_WEIGHT = {
				gbuffer0 = { sampler_states = "clamp_point" }
				gbuffer1 = { sampler_states = "clamp_point" }
			}
			linear_depth = { sampler_states = "clamp_point" }
		}

		code="""
			#if defined(LAMBERTIAN_WEIGHT)
				DECLARE_SAMPLER_2D(gbuffer0);
				DECLARE_SAMPLER_2D(gbuffer1);
			#endif
			DECLARE_SAMPLER_2D(linear_depth);

			struct VS_INPUT {
				float4 position : POSITION;
			};

			struct PS_INPUT {
				float4 position : SV_POSITION;
				float4 w : TEXCOORD1;
			};

			CBUFFER_START(c0)
				#if defined(SPOT)
					float4x4 world;
				#endif
				float4x4 world_view_proj;
			CBUFFER_END

			CBUFFER_START(Light)
				float3 light_position;
				float3 light_color;
				float3 light_falloff;
				float3 light_proxy_scale;
				#if defined(SPOT)
					float2 light_spot_falloff;
				#endif
				#if defined(MIN_WEIGHT)
					float min_weight; // exports = { name="Min Weight" type="scalar" value=0.0 min=0 max=1 step=0.001 }
				#endif
			CBUFFER_END

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			PS_INPUT vs_main(VS_INPUT input) {
				PS_INPUT o;
				o.position = mul(float4(input.position.xyz * light_proxy_scale, 1), world_view_proj);
				o.w = encode_world_pos(o.position, camera_unprojection);
				return o;
			}

			DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
			half4 ps_main(PS_INPUT input) : SV_TARGET0
			{
				half2 uv = input.position.xy / output_rt_size;
				// Sample textures
				float d = gbuffer_decode_depth(TEX2D(linear_depth, uv));
				#if defined(LAMBERTIAN_WEIGHT)
					half4 gbuffer_0 = TEX2D(gbuffer0, uv);
					half4 gbuffer_1 = TEX2D(gbuffer1, uv);
				#endif

				float3 wp = decode_world_pos(input.w, d);

				float3 V = normalize(camera_world._m30_m31_m32 - wp);
				float3 L = light_position - wp;
				float len_L = length(L) + 0.00001f;
				float attn = light_attenuation(len_L, light_falloff.x, light_falloff.y);

				#if defined(SPOT)
					float spot_angle = 1.0 - dot(L, -world._m10_m11_m12);
					attn *= (spot_angle > light_spot_falloff.x ? 1-saturate((spot_angle-light_spot_falloff.x)*light_spot_falloff.y) : 1);
				#endif

				#if defined(LAMBERTIAN_WEIGHT)
					half material_id = gbuffer_decode_material_id(gbuffer_0);
					float3 N = gbuffer_decode_normal(gbuffer_1, material_id);
					#if !defined(HARD_CUT_OFF)
						L *= 1.0/len_L; // normalize L
						N = normalize(N);
					#endif
					float NL = dot(N, L);

					#if defined(HARD_CUT_OFF)
						NL = (NL >= 0.0) ? 1.0 : 0.0;
					#elif defined(MIN_WEIGHT)
						NL = max(NL, min_weight);
					#else
						NL = saturate(NL);
					#endif
					attn *= NL;
				#endif

				attn *= length(light_color);

				return half4(1.0-attn, 0, 0, 0);
			}
		"""
	}
}


shaders = {
	global_lighting = {
		editor_advanced_mode = true

		contexts = {
			default = {
				passes_sort_mode="immediate"
				passes = [
					{ hlsl_shader="global_lighting" defines=["LOCAL_LIGHT_SHADOWS_ENABLED"] render_states="global_lighting" }
					{ defined="SKIN_MATERIAL_ENABLED"
						pass = [		
							{ hlsl_shader="global_lighting" defines=["SKIN" "LOCAL_LIGHT_SHADOWS_ENABLED"] render_states="global_lighting" }
						]
					}
				]
			}
		}

		compile = {
			default = [
				{ if: "on_renderer(D3D11, D3D12) && render_setting(ao_enabled, skin_material_enabled, local_probes_enabled)" defines=["SSAO_ENABLED" "SKIN_MATERIAL_ENABLED" "LOCAL_PROBES_ENABLED"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(skin_material_enabled, local_probes_enabled)" defines=["SKIN_MATERIAL_ENABLED" "LOCAL_PROBES_ENABLED"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(ao_enabled, local_probes_enabled)" defines=["SSAO_ENABLED" "LOCAL_PROBES_ENABLED"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(local_probes_enabled)" defines=["LOCAL_PROBES_ENABLED"] }

				{ if: "on_renderer(D3D11, D3D12) && render_setting(ao_enabled, skin_material_enabled)" defines=["SSAO_ENABLED" "SKIN_MATERIAL_ENABLED"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(skin_material_enabled)" defines=["SKIN_MATERIAL_ENABLED"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(ao_enabled)" defines=["SSAO_ENABLED"] }
				{ defines=[""] }
			]
		}
	}

	brdf_lut = {
		editor_advanced_mode = true

		contexts = {
			default = {
				passes_sort_mode="immediate"
				passes = [
					{ hlsl_shader="brdf_lut" render_states="filter" }
				]
			}
		}

		compile = {
			default = [
				{ defines="" }
			]
		}
	}

	light_source = {
		editor_advanced_mode = false

		editor_options = [
			{
				name="Light Type"
				options = [
					{ name="Omni" define="OMNI" }
					{ name="Spot" define="SPOT" }
				]
			}
			{
				name="Cookie Projection"
				options = [
					{ name="Enable Cookie Projection" 	define="COOKIE_PROJECTION" 			condition="SPOT" }
					{ name="Clamp Texture Sampler" 		define="COOKIE_CLAMP_SAMPLER" 		condition="SPOT" }
					{ name="UV Offset" 					define="COOKIE_UV_OFFSET" 			condition="SPOT" }
					{ name="UV Scale" 					define="COOKIE_UV_SCALE" 			condition="SPOT" }
					{ name="UV Offset Animation" 		define="COOKIE_UV_OFFSET_ANIM" 		condition="SPOT" }
					{ name="UV Rotation" 				define="COOKIE_UV_ROTATION_ANIM" 	condition="SPOT" }
				]
			}
			{
				name="Properties"
				options = [
					{ name="Cast Shadows" define="SHADOW_MAPPING" }
				]
			}
		]

		contexts = {
			default = {
				passes_sort_mode="immediate"
				passes = [
					{ hlsl_shader="light_source" render_states="light" }
					{ defined="SKIN_MATERIAL_ENABLED"
						pass = [		
							{ hlsl_shader="light_source" defines=["SKIN"] render_states="light" }
						]
					}
				]
			}
		}

		compile = {
			default = [
				 // TODO: this syntax is broken!
				//{ if: "on_renderer(D3D11)" render_settings={ local_lights_shadow_map_filter_quality="high", skin_material_enabled=true } defines=["PCF_5X5" "SKIN_MATERIAL_ENABLED"] }
				//{ if: "on_renderer(D3D11) && render_setting(skin_material_enabled)" defines=["SKIN_MATERIAL_ENABLED"] }
				//{ if: "on_renderer(D3D11)" render_settings={ local_lights_shadow_map_filter_quality="high" } defines=["PCF_5X5"] }
				{ if: "on_renderer(D3D11, D3D12) && render_setting(skin_material_enabled)" defines=["SKIN_MATERIAL_ENABLED"] }
				{ defines=[""] }
			]
		}
	}

	// TODO: Make spot light work too
	ao_source = {
		editor_options = [
			{
				name="Other"
				options = [
					{ name="Lambertian Weight" define="LAMBERTIAN_WEIGHT" tool_tip="Uses the normal to remove ao from back-facing triangles." }
					{ name=" - Min Weight" define="MIN_WEIGHT" condition="LAMBERTIAN_WEIGHT && !HARD_CUT_OFF" }
					{ name=" - Hard Cut-Off" define="HARD_CUT_OFF" condition="LAMBERTIAN_WEIGHT && !MIN_WEIGHT" }
				]
			}
		]

		contexts = {
			default = {
				passes = [
					{ layer="ao_sources" hlsl_shader="ao_source" defines="OMNI" render_states="ao_source" }
				]
			}
		}

		compile = {
			default = [
				{ defines="" platforms = "D3D11 D3D12"}
			]
		}
	}
}

static_compile= [
	{ shader="global_lighting" }
	//{ shader="global_lighting" defines=["CLUSTERED_SHADING"] }
	{ shader="global_lighting" defines=["SUN"] }
	//{ shader="global_lighting" defines=["SUN" "CLUSTERED_SHADING"] }
	{ shader="global_lighting" defines=["SSR_ENABLED"] }
	//{ shader="global_lighting" defines=["SSR_ENABLED" "CLUSTERED_SHADING"] }
	{ shader="global_lighting" defines=["SUN" "SSR_ENABLED"] }
	//{ shader="global_lighting" defines=["SUN" "SSR_ENABLED" "CLUSTERED_SHADING"] }
	
	//{ shader="brdf_lut" }

	{ shader="light_source" defines=["OMNI"] }
	{ shader="light_source" defines=["OMNI" "SHADOW_MAPPING"] }
	{ shader="light_source" defines=["SPOT"] }
	{ shader="light_source" defines=["SPOT" "SHADOW_MAPPING"] }
	{ shader="light_source" defines=["BOX"] }
	{ shader="light_source" defines=["BOX" "SHADOW_MAPPING"] }
]
