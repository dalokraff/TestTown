sampler_states = {
	shadow_map = {
		states = {
			srgb = "false"

			defined_RENDERER_D3D11 = {
				comparison_func = "less"
				filter = "comparison_min_mag_linear_mip_point"
				address_u = "address_clamp"
				address_v = "address_clamp"
				address_w = "address_clamp"
			}
			defined_RENDERER_D3D12 = {
				comparison_func = "less"
				filter = "comparison_min_mag_linear_mip_point"
				address_u = "address_clamp"
				address_v = "address_clamp"
				address_w = "address_clamp"
			}
			defined_RENDERER_GNM = {
				comparison_func = "less"
				filter = "min_mag_mip_linear"
				address_u = "address_clamp"
				address_v = "address_clamp"
				address_w = "address_clamp"				
			}
			defined_RENDERER_GL = {
				comparison_func = "less"
				filter = "min_mag_linear"
				address_u = "address_clamp_to_edge"
				address_v = "address_clamp_to_edge"
				address_w = "address_clamp_to_edge"				
			}
		}
	}
}

hlsl_shaders = {
	shadow_bias = {
		fp_code = { ref = "code" }
		vp_code = { ref = "code" }
		code = """
			CBUFFER_START(shadow_data)
				float3 local_shadow_map_bias;
				float3 sun_shadow_map_bias;
				float3 ssm_shadow_map_bias;
			CBUFFER_END

			float base_apply_shadow_depth_comparison_bias(float linear_depth, float shadow_comparison_depth, float3 shadow_map_bias) {
				const float min_bias = shadow_map_bias.x;
				const float max_bias = shadow_map_bias.y;
				const float blend_distance = shadow_map_bias.z;
				return shadow_comparison_depth - lerp(min_bias, max_bias, saturate(linear_depth / blend_distance));
			}

			float apply_local_shadow_depth_comparison_bias(float linear_depth, float shadow_comparison_depth, float3 shadow_map_bias) {
				// still need tweakable shadow bias on local lights for d3d12 as their depth-range is very .. weird?
				return base_apply_shadow_depth_comparison_bias(linear_depth, shadow_comparison_depth, shadow_map_bias);
			}

			float apply_shadow_depth_comparison_bias(float linear_depth, float shadow_comparison_depth, float3 shadow_map_bias) {
				// Do not need a sun shadow map bias on d3d12 as we're using 32bit shadow maps, and they handle the shitz!
				#if 0//defined(RENDERER_D3D12)
					return shadow_comparison_depth;
				#else
					return base_apply_shadow_depth_comparison_bias(linear_depth, shadow_comparison_depth, shadow_map_bias);
				#endif
			}
		"""
	}

	shadow_map_filtering = {
		vp_code = { ref = "code" }
		fp_code = { ref = "code" }
		code = """
				#if defined(RENDERER_D3D11) || defined(RENDERER_D3D12) || defined(RENDERER_GNM)
					float shadow_intensity_2d(ComparisonSampler2D shadow_map, float2 shadow_map_size, float2 uv, float comparison_depth) {
						float2 tscale = 1.f / shadow_map_size;

						#if defined(PCF_5X5)
							uv *= shadow_map_size;

							float2 base_uv = floor(uv + 0.5);
							float s = (uv.x + 0.5 - base_uv.x);
							float t = (uv.y + 0.5 - base_uv.y);
							base_uv = (base_uv - float2(0.5, 0.5)) * tscale;

							float a = 0;

							float2 w0 = float2(4 - 3 * s, 4 - 3 * t);
							float2 w1 = float2(7, 7);
							float2 w2 = float2(1 + 3 * s, 1 + 3 * t);

							float2 uv0 = float2((3 - 2 * s) / w0.x - 2, (3 - 2 * t) / w0.y - 2) * tscale;
							float2 uv1 = float2((3 + s) / w1.x, (3 + t) / w1.y) * tscale;
							float2 uv2 = float2(s / w2.x + 2, t / w2.y + 2) * tscale;

							a += w0.x * w0.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv0.x, uv0.y), comparison_depth);
							a += w1.x * w0.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv1.x, uv0.y), comparison_depth);
							a += w2.x * w0.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv2.x, uv0.y), comparison_depth);

							a += w0.x * w1.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv0.x, uv1.y), comparison_depth);
							a += w1.x * w1.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv1.x, uv1.y), comparison_depth);
							a += w2.x * w1.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv2.x, uv1.y), comparison_depth);

							a += w0.x * w2.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv0.x, uv2.y), comparison_depth);
							a += w1.x * w2.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv1.x, uv2.y), comparison_depth);
							a += w2.x * w2.y * TEX2DCMPLOD0(shadow_map, base_uv + float2(uv2.x, uv2.y), comparison_depth);

							return a / 144.f;
						#else
							float2 half_pixel = tscale * 0.5f;

							float a =
								TEX2DCMPLOD0(shadow_map, uv + float2(-half_pixel.x,  half_pixel.y), comparison_depth) +
								TEX2DCMPLOD0(shadow_map, uv + float2( half_pixel.x,  half_pixel.y), comparison_depth) +
								TEX2DCMPLOD0(shadow_map, uv + float2(-half_pixel.x, -half_pixel.y), comparison_depth) +
								TEX2DCMPLOD0(shadow_map, uv + float2( half_pixel.x, -half_pixel.y), comparison_depth);

							a *= 0.25;

							return a;
						#endif
					}
				#else
					lowp float shadow_intensity_2d(ComparisonSampler2D shadow_map, mediump vec2 shadow_map_size, highp vec2 uv, highp float comparison_depth) {
						highp vec2 half_pixel = vec2(0.5, 0.5) / shadow_map_size;

						lowp float shadow =
							TEX2DCMP(shadow_map, vec3(uv + vec2(-half_pixel.x,  half_pixel.y), comparison_depth))
							+ TEX2DCMP(shadow_map, vec3(uv + vec2( half_pixel.x,  half_pixel.y), comparison_depth))
							+ TEX2DCMP(shadow_map, vec3(uv + vec2( half_pixel.x, -half_pixel.y), comparison_depth))
							+ TEX2DCMP(shadow_map, vec3(uv + vec2(-half_pixel.x, -half_pixel.y), comparison_depth));

						return shadow * 0.25;
					}
				#endif
		"""
	}	

	vsm_common = {
		code="""
			// uv is the shadow map uv
			float sample_light_depth(Sampler2D shadow_map, float2 uv)
			{
				float shadow_depth = TEX2DLOD(shadow_map, uv, 0.0).x;
				if (any(uv >= vp_min_slice0.xz && uv <= vp_max_slice0.xz))
					return linearize_depth(shadow_depth, shadow_near_far0);
				if (any(uv >= vp_min_slice1.xz && uv <= vp_max_slice1.xz))
					return linearize_depth(shadow_depth, shadow_near_far1);
				if (any(uv >= vp_min_slice2.xz && uv <= vp_max_slice2.xz))
					return linearize_depth(shadow_depth, shadow_near_far2);
				// if (any(uv >= vp_min_slice3.xz && uv <= vp_max_slice3.xz))
					return linearize_depth(shadow_depth, shadow_near_far3);
			}

			float sample_vsm(Sampler2D shadow_map, float3 vsm_pos)
			{
				// Variance Shadow Mapping 
				// http://developer.download.nvidia.com/SDK/10/direct3d/Source/VarianceShadowMapping/Doc/VarianceShadowMapping.pdf
				float fragDepth = vsm_pos.z;
				float2 moments = TEX2DLOD(shadow_map, vsm_pos.xy, 0);
				float E_x2 = moments.y;
				float Ex_2 = moments.x * moments.x;
				float variance = E_x2 - Ex_2;
				float mD = moments.x - fragDepth;
				float mD_2 = mD * mD;
				float p = variance / (variance + mD_2);
				return max(p, fragDepth <= moments.x);

				//// Manual comparison sampler
				//float shadow_depth = TEX2DLOD(shadow_map, vsm_pos.xy);
				//float shadow = vsm_pos.z <= shadow_depth; 
				//return shadow;
			}

			float3 sm_to_vsm_pos(float3 sm_pos, float2 camera_near_far)
			{
				sm_pos.z = linearize_depth(sm_pos.z, camera_near_far);
				return sm_pos;
			}

			float calculate_vsm_intensity(Sampler2D shadow_map, const float3 world_pos)
			{
				// TODO: make define version as well if defined(SUN_SHADOWS)
				if (sun_shadows_enabled && sun_shadows) {
					float3 wp_shadow_space = mul(world_pos, to_mat3(shadow_rotation));
					float3 sm0_pos = wp_shadow_space * shadow_scale_slice0 + shadow_bias_slice0;
					float3 sm1_pos = wp_shadow_space * shadow_scale_slice1 + shadow_bias_slice1;
					float3 sm2_pos = wp_shadow_space * shadow_scale_slice2 + shadow_bias_slice2;
					float3 sm3_pos = wp_shadow_space * shadow_scale_slice3 + shadow_bias_slice3;

					#if defined(RENDERER_D3D11) || defined(RENDERER_D3D12) || defined(RENDERER_GNM)
						float3 sm0_test_pos = sm0_pos;
						float3 sm1_test_pos = sm1_pos;
						float3 sm2_test_pos = sm2_pos;
						float3 sm3_test_pos = sm3_pos;
					#else
						// Need to flip z because of upside down rendering.
						float3 sm0_test_pos = float3(sm0_pos.x, sm0_pos.y, 1.0f - sm0_pos.z);
						float3 sm1_test_pos = float3(sm1_pos.x, sm1_pos.y, 1.0f - sm1_pos.z);
						float3 sm2_test_pos = float3(sm2_pos.x, sm2_pos.y, 1.0f - sm2_pos.z);
						float3 sm3_test_pos = float3(sm3_pos.x, sm3_pos.y, 1.0f - sm3_pos.z);
					#endif
					if (dot(float3(lessThan(sm0_test_pos, vp_min_slice0)) + float3(greaterThan(sm0_test_pos, vp_max_slice0)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_vsm(shadow_map, sm_to_vsm_pos(sm0_pos.xzy, shadow_near_far0));
					if (dot(float3(lessThan(sm1_test_pos, vp_min_slice1)) + float3(greaterThan(sm1_test_pos, vp_max_slice1)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_vsm(shadow_map, sm_to_vsm_pos(sm1_pos.xzy, shadow_near_far1));
					if (dot(float3(lessThan(sm2_test_pos, vp_min_slice2)) + float3(greaterThan(sm2_test_pos, vp_max_slice2)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_vsm(shadow_map, sm_to_vsm_pos(sm2_pos.xzy, shadow_near_far2));
					if (dot(float3(lessThan(sm3_test_pos, vp_min_slice3)) + float3(greaterThan(sm3_test_pos, vp_max_slice3)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_vsm(shadow_map, sm_to_vsm_pos(sm3_pos.xzy, shadow_near_far3));
				}

				return 1.0;
			}
		"""
	}

	esm_common = {
		code="""
			CBUFFER_START(esm_data_c)
				float volumetric_esm_constant;
			CBUFFER_END

			float sample_esm(Sampler2D shadow_map, float3 esm_pos)
			{
				float exp_shadow_depth = TEX2DLOD(shadow_map, esm_pos.xy, 0);
				float shadow = exp_shadow_depth*exp(-volumetric_esm_constant*esm_pos.z); 
				return shadow;
			}

			float3 sm_to_esm_pos(float3 sm_pos, float2 camera_near_far)
			{
				sm_pos.z = linearize_depth(sm_pos.z, camera_near_far);
				return sm_pos;
			}

			float calculate_esm_intensity(Sampler2D shadow_map, const float3 world_pos)
			{
				// TODO: make define version as well if defined(SUN_SHADOWS)
				if (sun_shadows_enabled && sun_shadows) {
					float3 wp_shadow_space = mul(world_pos, to_mat3(shadow_rotation));
					float3 sm0_pos = wp_shadow_space * shadow_scale_slice0 + shadow_bias_slice0;
					float3 sm1_pos = wp_shadow_space * shadow_scale_slice1 + shadow_bias_slice1;
					float3 sm2_pos = wp_shadow_space * shadow_scale_slice2 + shadow_bias_slice2;
					float3 sm3_pos = wp_shadow_space * shadow_scale_slice3 + shadow_bias_slice3;

					#if defined(RENDERER_D3D11) || defined(RENDERER_D3D12) || defined(RENDERER_GNM)
						float3 sm0_test_pos = sm0_pos;
						float3 sm1_test_pos = sm1_pos;
						float3 sm2_test_pos = sm2_pos;
						float3 sm3_test_pos = sm3_pos;
					#else
						// Need to flip z because of upside down rendering.
						float3 sm0_test_pos = float3(sm0_pos.x, sm0_pos.y, 1.0f - sm0_pos.z);
						float3 sm1_test_pos = float3(sm1_pos.x, sm1_pos.y, 1.0f - sm1_pos.z);
						float3 sm2_test_pos = float3(sm2_pos.x, sm2_pos.y, 1.0f - sm2_pos.z);
						float3 sm3_test_pos = float3(sm3_pos.x, sm3_pos.y, 1.0f - sm3_pos.z);
					#endif
					if (dot(float3(lessThan(sm0_test_pos, vp_min_slice0)) + float3(greaterThan(sm0_test_pos, vp_max_slice0)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_esm(shadow_map, sm_to_esm_pos(sm0_pos.xzy, shadow_near_far0));
					if (dot(float3(lessThan(sm1_test_pos, vp_min_slice1)) + float3(greaterThan(sm1_test_pos, vp_max_slice1)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_esm(shadow_map, sm_to_esm_pos(sm1_pos.xzy, shadow_near_far1));
					if (dot(float3(lessThan(sm2_test_pos, vp_min_slice2)) + float3(greaterThan(sm2_test_pos, vp_max_slice2)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_esm(shadow_map, sm_to_esm_pos(sm2_pos.xzy, shadow_near_far2));
					if (dot(float3(lessThan(sm3_test_pos, vp_min_slice3)) + float3(greaterThan(sm3_test_pos, vp_max_slice3)), float3(1.0f, 1.0f, 1.0f)) == 0.0f)
						return sample_esm(shadow_map, sm_to_esm_pos(sm3_pos.xzy, shadow_near_far3));
				}

				return 1.0;
			}
		"""
	}
}
