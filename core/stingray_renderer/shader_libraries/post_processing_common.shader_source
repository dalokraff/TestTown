hlsl_shaders = {
	post_processing_common = {
		code="""
			#if !defined(RENDERER_GL)
				#define AO_MAX_DISTANCE 300.0
				#define SSR_MIPMAP_LEVELS 5.0

				#define TWOPI PI * 2

				#define VELOCITY_COMPONENTS xy

				#if defined(PLATFORM_XB1)
					#define VELOCITY_EPSILON 0.00005
				#else
					#define VELOCITY_EPSILON 0.0001
				#endif

				// This is ~15px for a 1920x1080 back_buffer
				#define MAX_COC 0.00925925925 

				// The first 8 terms of a base 3 halton sequence
				static const float halton_sequence_1d_8[8] = { 1.0/3.0, 2.0/3.0, 1.0/9.0, 4.0/9.0, 7.0/9.0, 2.0/9.0, 5.0/9.0, 8.0/9.0};

				// The first 16 terms of a base 3 halton sequence
				static const float halton_sequence_1d_16[16] = {1.0/3.0, 2.0/3.0, 1.0/9.0, 4.0/9.0, 7.0/9.0, 2.0/9.0, 5.0/9.0, 8.0/9.0, 1.0/27.0, 10.0/27.0, 19.0/27.0, 4.0/27.0, 13.0/27.0, 22.0/27.0, 7.0/27.0, 16.0/27.0};

				// Beyer dithering pattern
				static const float dither_pattern_4x4[4][4] = {
					{( 0.0/15.0 - 0.5) * 2.0, ( 8.0/15.0 - 0.5) * 2.0, ( 2.0/15.0 - 0.5) * 2.0, (10.0/15.0 - 0.5) * 2.0},
					{(12.0/15.0 - 0.5) * 2.0, ( 4.0/15.0 - 0.5) * 2.0, (14.0/15.0 - 0.5) * 2.0, ( 6.0/15.0 - 0.5) * 2.0},
					{( 3.0/15.0 - 0.5) * 2.0, (11.0/15.0 - 0.5) * 2.0, ( 1.0/15.0 - 0.5) * 2.0, ( 9.0/15.0 - 0.5) * 2.0},
					{(15.0/15.0 - 0.5) * 2.0, ( 7.0/15.0 - 0.5) * 2.0, (13.0/15.0 - 0.5) * 2.0, ( 5.0/15.0 - 0.5) * 2.0}
				};

				static const float dither_pattern_8x8[8][8] = {
					{( 1.0/65.0 - 0.5) * 2.0, (49.0/65.0 - 0.5) * 2.0, (13.0/65.0 - 0.5) * 2.0, (61.0/65.0 - 0.5) * 2.0, ( 4.0/65.0 - 0.5) * 2.0, (52.0/65.0 - 0.5) * 2.0, (16.0/65.0 - 0.5) * 2.0, (64.0/65.0 - 0.5) * 2.0},
					{(33.0/65.0 - 0.5) * 2.0, (17.0/65.0 - 0.5) * 2.0, (45.0/65.0 - 0.5) * 2.0, (29.0/65.0 - 0.5) * 2.0, (36.0/65.0 - 0.5) * 2.0, (20.0/65.0 - 0.5) * 2.0, (48.0/65.0 - 0.5) * 2.0, (32.0/65.0 - 0.5) * 2.0},
					{( 9.0/65.0 - 0.5) * 2.0, (57.0/65.0 - 0.5) * 2.0, ( 5.0/65.0 - 0.5) * 2.0, (53.0/65.0 - 0.5) * 2.0, (12.0/65.0 - 0.5) * 2.0, (60.0/65.0 - 0.5) * 2.0, ( 8.0/65.0 - 0.5) * 2.0, (56.0/65.0 - 0.5) * 2.0},
					{(41.0/65.0 - 0.5) * 2.0, (25.0/65.0 - 0.5) * 2.0, (37.0/65.0 - 0.5) * 2.0, (21.0/65.0 - 0.5) * 2.0, (44.0/65.0 - 0.5) * 2.0, (28.0/65.0 - 0.5) * 2.0, (40.0/65.0 - 0.5) * 2.0, (24.0/65.0 - 0.5) * 2.0},
					{( 3.0/65.0 - 0.5) * 2.0, (51.0/65.0 - 0.5) * 2.0, (15.0/65.0 - 0.5) * 2.0, (63.0/65.0 - 0.5) * 2.0, ( 2.0/65.0 - 0.5) * 2.0, (50.0/65.0 - 0.5) * 2.0, (14.0/65.0 - 0.5) * 2.0, (62.0/65.0 - 0.5) * 2.0},
					{(35.0/65.0 - 0.5) * 2.0, (19.0/65.0 - 0.5) * 2.0, (47.0/65.0 - 0.5) * 2.0, (31.0/65.0 - 0.5) * 2.0, (34.0/65.0 - 0.5) * 2.0, (18.0/65.0 - 0.5) * 2.0, (46.0/65.0 - 0.5) * 2.0, (30.0/65.0 - 0.5) * 2.0},
					{(11.0/65.0 - 0.5) * 2.0, (59.0/65.0 - 0.5) * 2.0, ( 7.0/65.0 - 0.5) * 2.0, (55.0/65.0 - 0.5) * 2.0, (10.0/65.0 - 0.5) * 2.0, (58.0/65.0 - 0.5) * 2.0, ( 6.0/65.0 - 0.5) * 2.0, (54.0/65.0 - 0.5) * 2.0},
					{(43.0/65.0 - 0.5) * 2.0, (27.0/65.0 - 0.5) * 2.0, (39.0/65.0 - 0.5) * 2.0, (23.0/65.0 - 0.5) * 2.0, (42.0/65.0 - 0.5) * 2.0, (26.0/65.0 - 0.5) * 2.0, (38.0/65.0 - 0.5) * 2.0, (22.0/65.0 - 0.5) * 2.0}
				};

				float encode_coc(float c) {
					return saturate((c + 1.0) * 0.5);
				}

				float decode_coc(float c) {
					return c * 2.0 - 1.0;
				}

			#endif
		"""
	}

	neighborhood_clamping = {
		code="""
			float4 safe_range_tone_map(float4 color)
			{
				return float4(safe_range_tone_map(color.rgb), color.a);
			}

			float4 inv_safe_range_tone_map(float4 color)
			{
				return float4(inv_safe_range_tone_map(color.rgb), color.a);
			}

			float intersect_aabb(float3 dir, float3 start, float3 aabb)
			{
				float3 inv_dir = rcp(dir + 0.000001);
				float3 diff_min = ( aabb - start) * inv_dir;
				float3 diff_max = (-aabb - start) * inv_dir;

				float min_x = min(diff_min.x, diff_max.x);
				float min_y = min(diff_min.y, diff_max.y);
				float min_z = min(diff_min.z, diff_max.z);

				return max(max(min_x, min_y), min_z);
			}

			float distance_to_ycocg_box(float3 prev_sample, float3 curr_sample, float3 neighborhood_min, float3 neighborhood_max)
			{
				float3 min_value = min(curr_sample, min(neighborhood_min, neighborhood_max));
				float3 max_value = max(curr_sample, max(neighborhood_min, neighborhood_max));	
				float3 average_value = (max_value + min_value) * 0.5;

				float3 dir = curr_sample - prev_sample;
				float3 start = prev_sample - average_value;
				float3 aabb = max_value - average_value;

				return saturate(intersect_aabb(dir, start, aabb));	
			}
		"""
	}
}