group = "Output"
display_name = "Probe Base"
output_node = true
render_configs = ["core/stingray_renderer/renderer"]

inputs = {
}

options = {
	"b833d4bf-29f6-4af1-81dd-bbbc45a9c680" = "REFLECTION_AND_RADIANCE_PROBE"
	"89ba67e3-785c-4eb1-91cc-2ee43c810584" = "REFLECTION_PROBE"
	"8936d459-2122-4172-8d77-63b412f76060" = "RADIANCE_PROBE"
	"0676a882-447b-41fe-a30e-34fd33cbc27a" = "RGBM_ENCODING"
}

ui = [
	{
		type = "drop_down"
		display_name = "Material Type"
		options = {
			"Reflection & Radiance"		= "b833d4bf-29f6-4af1-81dd-bbbc45a9c680"
			"Reflection"				= "89ba67e3-785c-4eb1-91cc-2ee43c810584"
			"Radiance"					= "8936d459-2122-4172-8d77-63b412f76060"
		}
		default = "b833d4bf-29f6-4af1-81dd-bbbc45a9c680"
	}

	{
		type = "drop_down"
		display_name = "Encoding"
		options = {
			"Linear Color" 	= "00000000-0000-0000-0000-000000000000"
			"RGBM Color" 	= "0676a882-447b-41fe-a30e-34fd33cbc27a"
		}
		default = "00000000-0000-0000-0000-000000000000"
	}
	
]

render_state = {
	reflection_probe = {
		inherit: ["core/stingray_renderer/shader_libraries/common/common#default"]
		state: {
			z_enable = "true"
			z_write_enable = "false"
			z_func = "greater_equal"

			cull_mode = "cull_ccw"

			blend_enable = "true"
			blend_op = "blend_op_add"
			dest_blend = "blend_one"
			src_blend = "blend_inv_dest_alpha"

			// when far distance is short and the probe is clipped by it, we still want to render it.
			depth_clip_enable = "false"
		}
	}

	debug_visualization = {
		inherit: ["core/stingray_renderer/shader_libraries/common/common#opacity"]
		state: {
			"defined(FRONT_CULLING)" = {
				cull_mode = "cull_ccw"
			}
			"defined(BACK_CULLING)" = {
				cull_mode = "cull_cw"
			}
			"defined(WIREFRAME)" = {
				cull_mode = "cull_none"
				fill_mode = "fill_wireframe"	
				"on_renderer(D3D11, D3D12)" = {
					depth_bias = "-1"
					depth_bias_clamp = "-0.00015"
					slope_scale_depth_bias = "-2.0"
				}
			}
			"defined(DRAW_INFLUENCE)" = {
				cull_mode = "cull_none"
				z_func = "greater_equal"
			}
		}
	}
}

sampler_state = {

}

channels = 	{
	vertex_position = { type = "float4" domain = "vertex" }
}

permutation_sets = {
}

//log_permutations = true
shader_contexts = {
	default = {
		passes_sort_mode = "deferred"
		compile_with = [
			{ default = true }
		]
		passes = [
			// Of some reason this code does not work in when light material is inherited
			{ if: "defined(REFLECTION_PROBE)" then: [
				{ layer="reflection" code_block="reflection_probe" defines=["HAS_REFLECTION_PROBE"] render_state="reflection_probe" }
			]}
			{ if: "defined(RADIANCE_PROBE)" then: [
				{ layer="radiance" code_block="reflection_probe" defines=["HAS_RADIANCE_PROBE"] render_state="reflection_probe" }
			]}
			{ if: "defined(REFLECTION_AND_RADIANCE_PROBE)" then: [
				{ layer="radiance&reflection" code_block="reflection_probe" defines=["HAS_REFLECTION_PROBE", "HAS_RADIANCE_PROBE"] render_state="reflection_probe" }
			]}

			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_INFLUENCE"] render_state="debug_visualization" branch_key="dev_volume_visualization" }

			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_TRACE_VOLUME" "FRONT_CULLING"] render_state="debug_visualization" branch_key="dev_volume_visualization" }
			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_TRACE_VOLUME" "BACK_CULLING"] render_state="debug_visualization" branch_key="dev_volume_visualization" }
			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_TRACE_VOLUME" "WIREFRAME"] render_state="debug_visualization" branch_key="dev_volume_visualization" }

			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_INFLUENCE_VOLUME" "BACK_CULLING"] render_state="debug_visualization" branch_key="dev_volume_visualization" }
			{ layer="wireframe" code_block="reflection_probe" defines=["DRAW_INFLUENCE_VOLUME" "WIREFRAME"] render_state="debug_visualization" branch_key="dev_volume_visualization" }
		]
	}
}

code_blocks = {
	reflection_probe = {
		include:[
			"core/stingray_renderer/shader_libraries/common/common#common",
			"core/stingray_renderer/shader_libraries/common/common#gbuffer_access",
			"core/stingray_renderer/shader_libraries/common/lighting_common#brdf",
			"core/stingray_renderer/shader_libraries/common/shadow_map_common#shadow_bias"
			]

		samplers = {
			gbuffer0 = {
				sampler_state = "core/stingray_renderer/shader_libraries/common/common#clamp_point"
				source = "resource_set"
				slot_name = "gbuffer0"
				type = "2d"
			}

			gbuffer1 = {
				sampler_state = "core/stingray_renderer/shader_libraries/common/common#clamp_point"
				source = "resource_set"
				slot_name = "gbuffer1"
				type = "2d"
			}

			linear_depth = {
				sampler_state = "core/stingray_renderer/shader_libraries/common/common#clamp_point"
				source = "resource_set"
				slot_name = "linear_depth"
				type = "2d"
			}

			"defined(HAS_REFLECTION_PROBE)" = {
				reflection_map = {
					display_name = "Reflection Map"
					type = "cube"
					sampler_state = "core/stingray_renderer/shader_libraries/common/common#clamp_linear"
					source = "material"
					slot_name = "reflection_map"
				}
			}

			"defined(HAS_RADIANCE_PROBE)" = {
				radiation_map = {
					display_name = "Reflection Map"
					type = "cube"
					sampler_state = "core/stingray_renderer/shader_libraries/common/common#clamp_linear"
					source = "material"
					slot_name = "radiation_map"
				}
			}	
		}

		code = {
			hlsl = """
				DECLARE_SAMPLER_2D(gbuffer0);
				DECLARE_SAMPLER_2D(gbuffer1);
				DECLARE_SAMPLER_2D(linear_depth);
				#if defined(HAS_REFLECTION_PROBE)
					DECLARE_SAMPLER_CUBE(reflection_map);
				#endif
				#if defined(HAS_RADIANCE_PROBE)
					DECLARE_SAMPLER_CUBE(radiation_map);
				#endif

				struct VS_INPUT {
					float4 position : POSITION;
					GRAPH_VERTEX_INPUT
				};

				struct PS_INPUT {
					float4 position : SV_POSITION;
					float4 w : TEXCOORD1;
					GRAPH_PIXEL_INPUT
				};

				CBUFFER_START(c0)
					float4x4 world;
					float4x4 inv_world;
					float4x4 world_view_proj;
					GRAPH_MATERIAL_EXPORTS
				CBUFFER_END

				CBUFFER_START(light)
					float3 light_color;
					float3 light_position;
					float3 light_proxy_scale;
					float3 light_box_min;
					float3 light_box_max;

					// controlled from script data on probe unit propagated through the light material.
					float3 trace_box_min_offset;
					float3 trace_box_max_offset;
					float3 falloff;
				CBUFFER_END

				DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
				PS_INPUT vs_main(VS_INPUT input) {
					PS_INPUT o;

					GraphVertexParams params;
					GraphVertexResults results;

					// Write automatic params
					GRAPH_VERTEX_WRITE_PARAMS(params, input);

					const float3 trace_box_max = light_box_max - trace_box_max_offset;
					const float3 trace_box_min = light_box_min + trace_box_min_offset;

					#if defined(DRAW_TRACE_VOLUME)
						float3 scale = trace_box_max - trace_box_min;
						float4 position = float4(input.position.xyz * scale, 1);
						position.xyz += (trace_box_min + trace_box_max) * 0.5f;
					#else
						float4 position = float4(input.position.xyz * light_proxy_scale, 1);
						position.xyz += (light_box_min + light_box_max) * 0.5f;
					#endif
					GRAPH_VERTEX_PARAM(params, vertex_position) = position;

					o.position = mul(position, world_view_proj);
					#if !defined(STENCIL_MARK)
						o.w = encode_world_pos(o.position); 
					#endif

					// Evaluate all pieces of the graph that should run per-vertex.
					GRAPH_EVALUATE_VERTEX(results, params);

					// Write results
					GRAPH_VERTEX_WRITE(o, results, params);

					return o;
				}

				#if defined(DRAW_INFLUENCE_VOLUME) || defined(DRAW_TRACE_VOLUME)
					DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
					float4 ps_main() : SV_TARGET0
					{
						#if defined(WIREFRAME)
							#if defined(DRAW_INFLUENCE_VOLUME)
								return float4(1,0.8,0.8,0.5);
							#else
								return float4(0.8,1,0.8,0.5);
							#endif
						#elif defined(DRAW_INFLUENCE_VOLUME)
							return float4(1,0,0,0.1);
						#else
							return float4(0,1,0,0.1);
						#endif
					}
				#else
					// TODO: does not support scaling atm.
					
					#if defined(DRAW_INFLUENCE)
						DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
						float4 ps_main(PS_INPUT input) : SV_TARGET0
					#else
						#if defined(HAS_REFLECTION_PROBE) && defined(HAS_RADIANCE_PROBE)
							struct PS_OUTPUT {
								float4 reflection 	: SV_TARGET0;
								float4 radiation 	: SV_TARGET1;
							};
						#elif defined(HAS_REFLECTION_PROBE)
							struct PS_OUTPUT {
								float4 reflection : SV_TARGET0;
							};
						#elif defined(HAS_RADIANCE_PROBE)
							struct PS_OUTPUT {
								float4 radiation : SV_TARGET0;
							};
						#else
							#error "Invalid Path in probe_base"
						#endif

						DEFAULT_ROOT_SIGNATURE_ATTRIBUTE
						PS_OUTPUT ps_main(PS_INPUT input)
					#endif
					{
						half2 uv = input.position.xy / output_rt_size;
						float d = gbuffer_decode_depth(TEX2D(linear_depth, uv));

						float3 wp = decode_world_pos(input.w, d);
						float3 op = mul(float4(wp, 1), inv_world).xyz;
						float3 V = mul(normalize(camera_world._m30_m31_m32 - wp), (float3x3)inv_world);

						// Attenuate
						float3 distances = min(op - light_box_min, light_box_max - op) / falloff;
						float attn = saturate(min(distances.x, min(distances.y, distances.z)));

						#if defined(DRAW_INFLUENCE)
							bool3 inside = (distances > 0.0);
							if(!all(inside))
								discard;
							return float4(0, 0, 1, (1.0 - attn) * 0.5);
						#else
							PS_OUTPUT o;
						#endif

						#if defined(HAS_LIGHT_COLOR)
							GraphPixelParams params;
							GraphPixelResults graph;
							GRAPH_PIXEL_WRITE_PARAMS(params, input);
							GRAPH_EVALUATE_PIXEL(graph, params);							
						#else
							//float3 light_col = light_color;
						#endif

						half4 gbuffer_0 = TEX2D(gbuffer0, uv);
						MATERIAL_ID_TYPE material_id = gbuffer_decode_material_id(gbuffer_0);

						half4 gbuffer_1 = TEX2D(gbuffer1, uv);
						float3 gbuffer_normal = gbuffer_decode_normal(gbuffer_1, material_id);
						float3 N = mul(gbuffer_normal, (float3x3)inv_world);

						#if defined(HAS_REFLECTION_PROBE)
							const float3 trace_box_max = light_box_max - trace_box_max_offset;
							const float3 trace_box_min = light_box_min + trace_box_min_offset;

							half roughness = gbuffer_decode_roughness(gbuffer_1);
							float mipmap_index = roughness * 7.0;

							float3 reflection_dir;
							{
								reflection_dir = reflect(-V, N);
								float3 r_max = (trace_box_max - op) / reflection_dir;
								float3 r_min = (trace_box_min - op) / reflection_dir;
								float3 r_min_max = max(r_max, r_min); 
								float intersect_dist = min(min(r_min_max.x, r_min_max.y), r_min_max.z);
								reflection_dir = mul(op + reflection_dir * intersect_dist, (float3x3)world);
							}

							// TODO: clear coat
							#if defined(RGBM_ENCODING)
								float3 reflection_probe_result = rgbm_decode(TEXCUBELOD(reflection_map, reflection_dir, mipmap_index));
							#else
								float3 reflection_probe_result = TEXCUBELOD(reflection_map, reflection_dir, mipmap_index).rgb;
							#endif

							float3 reflection = light_color * reflection_probe_result;
							o.reflection = float4(reflection * attn, attn);
						#endif
						
						#if defined(HAS_RADIANCE_PROBE)
							float3 radiation_dir = gbuffer_normal;
							/*{
								radiation_dir = N;
								float3 r_max = (trace_box_max - op) / radiation_dir;
								float3 r_min = (trace_box_min - op) / radiation_dir;
								float3 r_min_max = max(r_max, r_min); 
								float intersect_dist = min(min(r_min_max.x, r_min_max.y), r_min_max.z);
								radiation_dir = mul(op + radiation_dir * intersect_dist, (float3x3)world);
							}*/

							#if defined(RGBM_ENCODING)
								float3 radiance_probe_result = rgbm_decode(TEXCUBELOD(radiation_map, radiation_dir, 0));
							#else
								float3 radiance_probe_result = TEXCUBELOD(radiation_map, radiation_dir, 0).rgb;
							#endif

							// TODO: this might be wanted, but requires more probes in order to get good result.
							// float diff_attn = saturate(dot(gbuffer_normal, normalize(world._m30_m31_m32 - wp)));
							float3 radiation = light_color * radiance_probe_result;
							o.radiation = float4(radiation * attn, attn);
						#endif

						#if !defined(DRAW_INFLUENCE)
							return o;
						#endif
					}
				#endif


			"""
		}
	}
}
