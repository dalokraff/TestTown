group = "Utility"
display_name = "Parallax / Bump Offset (Advanced)"
inputs = {
	"f72597c4-7487-419a-affb-df690e6582e1" = { 
		name = "uv" 		
		display_name = "UV" 	
		type = "float2" 
		is_required = true
		domain = "pixel"
	}

	"1b4832d1-78b5-4eff-8048-b4ce2f1de6b9" = { 
		name = "graph_scale" 	
		display_name = "Scale"	
		type = "scalar"
		is_required = true
	}

	"5de32bfd-ae1f-4f97-96a7-e8bbf24d723e" = { 
		name = "height_offset_in" 	
		display_name = "Height"	
		type = { scalar: ["HAS_HEIGHT_OFFSET"] }
		is_required = false
	}

	"096de7b2-b3eb-4cc6-8b56-284adea89219" = { 
		name = "steps" 	
		display_name = "Steps" 	
		type = "scalar"
		is_required = true
	}

	"10831b5e-917e-4128-aa05-46e1c695baca" = { 
		name = "binary_steps" 	
		display_name = "Binary Steps" 	
		type = { scalar: ["HAS_BINARY_STEPS"] }
		is_required = false
	}
}

imports = {
	dir = { 
		type = "float3"
		domain = "vertex"
		output_channel = "eye_vector"
	}
	"!defined(NO_VERTEX_NORMALS)": { 
		tsm0 = {
			type = "float3"
			domain = "vertex"
			output_channel = "tsm0"
		}
		tsm1 = {
			type = "float3"
			domain = "vertex"
			output_channel = "tsm1"
		}
		tsm2 = {
			type = "float3"
			domain = "vertex"
			output_channel = "tsm2"
		}
	}
}

defines = ["NEEDS_TANGENT_SPACE", "NEEDS_EYE_VECTOR"]

samplers = {
	height_map = {
		display_name = "Height"
		type = "2d"
		sampler_state = "core/stingray_renderer/shader_libraries/common/common#wrap_linear"
	}
}

domain = "pixel"
output = {	
	type = "float3"
}

language = "hlsl"
code = """
	#if defined(NO_VERTEX_NORMALS) 
		// Can't do parallax since we dont have access to normals, tangents or bitangents. This is often shadow meshes 
		RESULT(0); 
	#else 
		// Local ray-tracing whitin the height map.
		// Returns the uv coordinate and the normalized height of the intersection point.

		float3 t_view = normalize(float3(
			dot(dir, float3(tsm0.x, tsm1.x, tsm2.x)),
			dot(dir, float3(tsm0.y, tsm1.y, tsm2.y)),
			dot(dir, float3(tsm0.z, tsm1.z, tsm2.z))));

		float height_offset = 0.0;
		#if defined(HAS_HEIGHT_OFFSET)
			height_offset = height_offset_in;
		#endif

		// Start trace from the maximal height of the surface
		float n = steps;
		float scale = graph_scale;
		float height = 1.0; 
		float step_size = height / n;
		float2 dt = float2(t_view.x, -t_view.y) * scale * step_size;
		
		float2 t = uv + dt*n*0.5 +(float2(t_view.x, -t_view.y)*height_offset); 
		float height_sample = TEX2DLOD(height_map, t, 0).r ;

		// Linear search for the surface
		int int_n = int(n);
		for(int i = 0; i < int_n && height_sample < height; ++i ) {
			height -= step_size; 
			t -= dt; 
			height_sample = TEX2DLOD(height_map, t, 0).r;
		} 

		// Bilinear search for the intersection point
		#if defined(HAS_BINARY_STEPS)
			float ds = 0.5f;
			for(int i = 0; i < binary_steps; ++i ) {
				float m = 1.0f*ds*sign(height - height_sample); 
				height -= step_size*m; 
				t -= dt*m; 
				height_sample = TEX2DLOD(height_map, t, 0).r;
				ds *= 0.5f;
			}
		#endif

		RESULT(float3(t, height*scale+height_offset));
	#endif
"""
